O3GL И ЯЗЫКИ ПРОГРАММИРОВАНИЯ
Библиотека ориентирована на семейство языков C++ C# Java JavaScript.
Широко использует следующие возможности синтаксиса:
1) chained methods и builder паттерн
2) Перегруженные методы
3) Методы с переменным числом аргументов

ОСНОВНЫЕ ПРИНЦИПЫ
1) Минимальная конфигурация с разумными и интуитивными значениями по умолчанию.
2) Избегать дублирования данных, несогласованных данных
3) Объектно ориентированный подход. Работа с ресурсами opengl как с объектами
4) Client-state tracking. Отслеживание состояния на стороне клиента. Синхрониация клиент-серверных данных. 
5) Поддержка "пространств имен" с быстрым удалением созданных ресурсов. при этом ресурсы из разных пространств имен могут использоваться совместно.
6) Каждый ресурс может быть использован независимо для упрощения программирования opengl
7) Неявная инициализация ресурсов в зависимости от контекста использования

СОГЛАШЕНИЯ
	- Имена, изменяющие (или которые могут привести к изменению) opengl es server-state начинаются с большой буквы. Остальные - с маленькой.
	- Имена методов и их аргументов максимально соответсвуют OpenGL ES API

РЕСУРСЫ
	Следующие ресурсы, аналогичные существующим в OpenGL ES, представлены отдельными классами
	-Texture
	-Buffer
	-RenderBuffer
	-FrameBuffer
	-Shader
	-Program

НЕЯВНАЯ/ОТЛОЖЕННАЯ ИНИЦИАЛИЗАЦИЯ
	Текстуры
		Генерация mipmap если задан фильтр
		
	Вершинные буфферы
		
	
	Фрейм буфферы
	
	Рендер буфферы
	
	Шейдеры
	
	Программы
	
ОТ state-machine К ООП
	Методы Bind и Use не обязательны к использованию, хотя могут использоваться для упрощения работы с ресурсами.
	Явный вызов одного из этих методов приводит к вызову методов отложенной инициализации (если были вызваны) и т.о. к инициализации ресурса
	
	Каждый инстанс o3gl класса соответствует созданному на серверной стороне opengl es ресурсу
	
КОД ШЕЙДЕРОВ
	Библиотека должна работать с любыми шейдерными программами, не накладывая каких-либо ограничений на имена переменных/атрибутов
	Библиотека поставляется с набором шейдеров, которые могут быть использованы независимо от нее
	Шейдерный препроцессор позволяет исключать из кода шейдеров некоторые переменные и весь зависящи от них код.
	
Пространства имен ???
	o3gl = O3GL.getInstance(gl) создает новый объект, при создании ресурсов через который информация о них сохраняется и затем все ресурсы могут быть освобождены одним вызовом o3gl.Delete()
	

	
